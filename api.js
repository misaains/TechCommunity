// ============================
// API CLIENT –¥–ª—è TechCommunity
// –û–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –±—ç–∫–µ–Ω–¥–∞
// ============================

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  // –ê–¥—Ä–µ—Å –±—ç–∫–µ–Ω–¥–∞
  API_BASE_URL: 'http://172.20.10.2:8000',
  
  // Timeout –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
  TIMEOUT: 10000,
  
  // –í–∫–ª—é—á–∏—Ç—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
  DEBUG: true
};

// –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–∞
let authToken = localStorage.getItem('authToken') || null;

// ============================
// –£–¢–ò–õ–ò–¢–´
// ============================

/**
 * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ DEBUG)
 */
function log(message, data = null) {
  if (CONFIG.DEBUG) {
    console.log(`[API] ${message}`, data || '');
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω
 */
function setAuthToken(token) {
  authToken = token;
  localStorage.setItem('authToken', token);
  log('üîê Auth token saved');
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω
 */
function getAuthToken() {
  return authToken;
}

/**
 * –£–¥–∞–ª–∏—Ç—å —Ç–æ–∫–µ–Ω (logout)
 */
function clearAuthToken() {
  authToken = null;
  localStorage.removeItem('authToken');
  log('üîì Auth token cleared');
}

/**
 * –ë–∞–∑–æ–≤—ã–π HTTP –∑–∞–ø—Ä–æ—Å —Å timeout –∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
 */
async function apiRequest(endpoint, options = {}) {
  const url = `${CONFIG.API_BASE_URL}${endpoint}`;
  
  const defaultHeaders = {
    'Content-Type': 'application/json',
  };
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –µ—Å—Ç—å (–¥–ª—è –≤—Å–µ—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –∫—Ä–æ–º–µ /signup –∏ /login)
  if (authToken && !endpoint.includes('/login') && !endpoint.includes('/signup')) {
    defaultHeaders['Authorization'] = `Bearer ${authToken}`;
  }
  
  const config = {
    ...options,
    headers: {
      ...defaultHeaders,
      ...options.headers,
    },
  };
  
  log(`${config.method || 'GET'} ${url}`, config.body);
  
  try {
    // –°–æ–∑–¥–∞—ë–º Promise —Å timeout
    const fetchPromise = fetch(url, config);
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error('Request timeout')), CONFIG.TIMEOUT);
    });
    
    const response = await Promise.race([fetchPromise, timeoutPromise]);
    
    if (!response.ok) {
      if (response.status === 401) {
        log('‚ùå Unauthorized - —Ç–æ–∫–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫');
        clearAuthToken();
      }
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.message || errorData.detail || `HTTP ${response.status}: ${response.statusText}`);
    }
    
    const data = await response.json();
    log(`‚úÖ Response from ${endpoint}:`, data);
    
    return data;
  } catch (error) {
    console.error(`[API] ‚ùå Error on ${endpoint}:`, error);
    throw error;
  }
}

/**
 * –ó–∞–ø—Ä–æ—Å —Å form-data (–¥–ª—è –ª–æ–≥–∏–Ω–∞)
 */
async function apiRequestFormData(endpoint, formData) {
  const url = `${CONFIG.API_BASE_URL}${endpoint}`;
  
  log(`POST ${url} (form-data)`);
  
  try {
    const fetchPromise = fetch(url, {
      method: 'POST',
      body: formData,
    });
    
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error('Request timeout')), CONFIG.TIMEOUT);
    });
    
    const response = await Promise.race([fetchPromise, timeoutPromise]);
    
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.message || errorData.detail || `HTTP ${response.status}: ${response.statusText}`);
    }
    
    const data = await response.json();
    log(`‚úÖ Response from ${endpoint}:`, data);
    
    return data;
  } catch (error) {
    console.error(`[API] ‚ùå Error on ${endpoint}:`, error);
    throw error;
  }
}

// ============================
// API –ú–ï–¢–û–î–´ (–æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –±—ç–∫–µ–Ω–¥–∞)
// ============================

const API = {
  
  // ----------------------
  // –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø
  // ----------------------
  
  /**
   * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * POST /api/signup
   * @param {Object} userData - –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {email, password, name, etc.}
   * @returns {Promise<Object>}
   */
  signup: async (userData) => {
    return apiRequest('/signup', {
      method: 'POST',
      body: JSON.stringify(userData),
    });
  },
  
  /**
   * –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É
   * POST /api/login
   * @param {string} email - Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {string} password - –ü–∞—Ä–æ–ª—å
   * @returns {Promise<Object>} - –û–±—ä–µ–∫—Ç —Å —Ç–æ–∫–µ–Ω–æ–º {access_token, token_type}
   */
  login: async (email, password) => {
    const formData = new FormData();
    formData.append('username', email); // –ë—ç–∫–µ–Ω–¥ –æ–∂–∏–¥–∞–µ—Ç username, –ø–µ—Ä–µ–¥–∞–µ–º email
    formData.append('password', password);
    
    const response = await apiRequestFormData('/login', formData);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
    if (response.access_token) {
      setAuthToken(response.access_token);
      log('‚úÖ Logged in successfully');
    }
    
    return response;
  },
  
  /**
   * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (–æ—á–∏—Å—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞)
   */
  logout: () => {
    clearAuthToken();
    log('üëã Logged out');
  },
  
  // ----------------------
  // –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò
  // ----------------------
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * GET /api/users/{user_id}
   * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @returns {Promise<Object>}
   */
  getUser: async (userId) => {
    return apiRequest(`/users/${userId}`);
  },
  
  /**
   * –û–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å
   * PUT /api/users/me
   * @param {Object} userData - –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   * @returns {Promise<Object>}
   */
  updateProfile: async (userData) => {
    return apiRequest('/users/me', {
      method: 'PUT',
      body: JSON.stringify(userData),
    });
  },
  
  // ----------------------
  // –°–û–û–ë–©–ï–°–¢–í–ê
  // ----------------------
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ—Å—Ç–≤
   * GET /api/communities
   * @param {string} tags - –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç–µ–≥–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
   * @returns {Promise<Array>}
   */
  getCommunities: async (tags = null) => {
    let endpoint = '/communities';
    
    // –î–æ–±–∞–≤–ª—è–µ–º query –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–≥–∏
    if (tags) {
      const params = new URLSearchParams();
      params.append('tags', tags);
      endpoint += `?${params.toString()}`;
    }
    
    return apiRequest(endpoint);
  },
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ
   * GET /api/communities/{community_id}
   * @param {number} communityId - ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
   * @returns {Promise<Object>}
   */
  getCommunity: async (communityId) => {
    return apiRequest(`/communities/${communityId}`);
  },
  
  /**
   * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ
   * POST /api/communities
   * @param {Object} communityData - –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ {name, description, tags, etc.}
   * @returns {Promise<Object>}
   */
  createCommunity: async (communityData) => {
    return apiRequest('/communities', {
      method: 'POST',
      body: JSON.stringify(communityData),
    });
  },
  
  // ----------------------
  // –£–ß–ê–°–¢–ù–ò–ö–ò –°–û–û–ë–©–ï–°–¢–í
  // ----------------------
  
  /**
   * –í—Å—Ç—É–ø–∏—Ç—å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ
   * POST /api/communities/{community_id}/join
   * @param {number} communityId - ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
   * @returns {Promise<Object>}
   */
  joinCommunity: async (communityId) => {
    return apiRequest(`/communities/${communityId}/join`, {
      method: 'POST',
    });
  },
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
   * GET /api/communities/{community_id}/members
   * @param {number} communityId - ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
   * @returns {Promise<Array>}
   */
  getCommunityMembers: async (communityId) => {
    return apiRequest(`/communities/${communityId}/members`);
  },
  
  // ----------------------
  // –û–ë–™–Ø–í–õ–ï–ù–ò–Ø (ANNOUNCEMENTS)
  // ----------------------
  
  /**
   * –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ
   * POST /api/communities/{community_id}/announcements
   * @param {number} communityId - ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
   * @param {Object} announcementData - –î–∞–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è {title, content, etc.}
   * @returns {Promise<Object>}
   */
  createAnnouncement: async (communityId, announcementData) => {
    return apiRequest(`/communities/${communityId}/announcements`, {
      method: 'POST',
      body: JSON.stringify(announcementData),
    });
  },
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–π —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
   * GET /api/communities/{community_id}/announcements
   * @param {number} communityId - ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
   * @returns {Promise<Array>}
   */
  getAnnouncements: async (communityId) => {
    return apiRequest(`/communities/${communityId}/announcements`);
  },
  
  // ----------------------
  // –ö–ï–ô–°–´
  // ----------------------
  
  /**
   * –°–æ–∑–¥–∞—Ç—å –∫–µ–π—Å –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ
   * POST /api/communities/{community_id}/cases
   * @param {number} communityId - ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
   * @param {Object} caseData - –î–∞–Ω–Ω—ã–µ –∫–µ–π—Å–∞ {title, description, etc.}
   * @returns {Promise<Object>}
   */
  createCase: async (communityId, caseData) => {
    return apiRequest(`/communities/${communityId}/cases`, {
      method: 'POST',
      body: JSON.stringify(caseData),
    });
  },
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–µ–π—Å–æ–≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
   * GET /api/communities/{community_id}/cases
   * @param {number} communityId - ID —Å–æ–æ–±—â–µ—Å—Ç–≤–∞
   * @returns {Promise<Array>}
   */
  getCases: async (communityId) => {
    return apiRequest(`/communities/${communityId}/cases`);
  },
  
  // ----------------------
  // –£–¢–ò–õ–ò–¢–´
  // ----------------------
  
  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
   * @returns {boolean}
   */
  isAuthenticated: () => {
    return authToken !== null;
  },
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ç–æ–∫–µ–Ω
   * @returns {string|null}
   */
  getToken: () => {
    return authToken;
  },
  
  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é API
   * @returns {Object}
   */
  getConfig: () => {
    return {
      API_BASE_URL: CONFIG.API_BASE_URL,
      TIMEOUT: CONFIG.TIMEOUT,
      DEBUG: CONFIG.DEBUG,
      isAuthenticated: authToken !== null,
      hasToken: authToken !== null,
    };
  },
};

// ============================
// –≠–ö–°–ü–û–†–¢ –ò –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
// ============================

// –î–µ–ª–∞–µ–º API –¥–æ—Å—Ç—É–ø–Ω—ã–º –≥–ª–æ–±–∞–ª—å–Ω–æ
window.API = API;
window.APIConfig = CONFIG;

// –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
console.log('‚úÖ API Client loaded');
console.log('ÔøΩ Base URL:', CONFIG.API_BASE_URL);
console.log('üîê Authenticated:', API.isAuthenticated());

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è ES6 –º–æ–¥—É–ª–µ–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
if (typeof module !== 'undefined' && module.exports) {
  module.exports = { API, CONFIG };
}
